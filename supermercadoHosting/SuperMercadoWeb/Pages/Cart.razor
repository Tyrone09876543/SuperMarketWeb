@page "/Cart"
@using System.Security.Claims
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JsRuntime
@using Microsoft.EntityFrameworkCore;

<div class="text-center mb-3 border-bottom">
    <h1 class="mb-3"> Tu carrito de compras </h1>
    <a class="btn btn-outline-primary mb-2" role="button" href="Pasarela">
        <i class="bi bi-credit-card"></i>
        Comprar todo
    </a>
</div>

<div class="row row-cols-2 row-cols-md-3 justify-content-center">
    @foreach (var carrito in carritos)
    {
        var producto = products.Where(x => x.Id == carrito.ProductoId).FirstOrDefault();

        if (producto != null)
        {
            <div class="col-3 mb-3">
                <div class="card h-100">
                    <!-- imagen-->
                    <img class="card-img-top" style="width: 100%; max-height: 200px; min-height: 150px;"
                         src="data:image/jpg;base64,@Convert.ToBase64String(producto.Imagen)" alt="..." />
                    <!-- detalles del producto-->
                    <div class="card-body">
                        <div class="text-center">
                            <h5 class="fw-bolder">@producto.Nombre</h5>
                            <br />
                            @producto.Precio DOP$
                            <br />
                            Cantidad restante: @producto.Cantidad
                            <br />

                            <div class="form-inline">
                                <label for="">Cantidad: @carrito.Cantidad</label>
                                <button class="btn btn-outline-primary btn-sm m-1" href="#"
                                        @onclick="@(()=>actualizar(carrito,1))">
                                    +
                                </button>
                                <button class="btn btn-outline-danger btn-sm m-1" href="#"
                                        @onclick="@(()=>actualizar(carrito,0))">
                                    -
                                </button>
                            </div>
                        </div>
                    </div>
                    <!-- boton-->

                    <div class="card-footer border-top-0 bg-transparent">
                        <div class="text-center">
                            <button class="btn btn-outline-danger mt-auto" href="#"
                                    @onclick="@(()=> eliminar(carrito))">
                                Eliminar del carrito
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    List<Carrito> carritos = new List<Carrito>();
    List<Producto> products = new List<Producto>();
    async Task alerta(string mensaje)
    {
        await JsRuntime.InvokeVoidAsync("alert", mensaje);
    }

    void actualizar(Carrito carrito, int n)
    {
        if (n > 0)
        {
            carrito.Cantidad += 1;
        }
        else if (carrito.Cantidad > 1)
        {
            carrito.Cantidad -= 1;
        }

        dataContext.SaveChanges();
    }

    void eliminar(Carrito carrito)
    {
        var principal = HttpContextAccessor.HttpContext.User;
        var userId = principal.FindFirstValue(ClaimTypes.NameIdentifier);

        if (userId != null)
        {
            dataContext.Remove(carrito);
            dataContext.SaveChanges();
            carritos = dataContext.Carritos.Where(x => x.UserId == userId).ToList();
            products = dataContext.Productos.ToList();
        }
        else
        {
            alerta("Debe estar logeado para esto");
        }
    }

    protected override void OnInitialized()
    {
        var principal = HttpContextAccessor.HttpContext.User;
        var userId = principal.FindFirstValue(ClaimTypes.NameIdentifier);

        if (userId != null)
        {
            carritos = dataContext.Carritos.Where(x => x.UserId == userId).ToList();
            products = dataContext.Productos.ToList();
        }
        else
        {
            alerta("Debe estar logeado para agregar productos al carrito");
        }
    }
}